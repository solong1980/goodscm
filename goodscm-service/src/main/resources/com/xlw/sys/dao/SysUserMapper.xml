<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xlw.sys.dao.SysUserMapper" >
  <resultMap id="BaseResultMap" type="com.xlw.sys.model.SysUser" >
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="salt" property="salt" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="dept_id" property="deptId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  
  <insert id="insert" parameterType="com.xlw.sys.model.SysUser" >
    insert into sys_user (
    username, 
    password, 
    salt, 
    email, 
    mobile,
    status, 
    dept_id, 
    create_time
    )
    values (
	#{username,jdbcType=VARCHAR}, 
	#{password,jdbcType=VARCHAR},
	#{salt,jdbcType=VARCHAR}, 
	#{email,jdbcType=VARCHAR}, 
	#{mobile,jdbcType=VARCHAR}, 
    #{status,jdbcType=TINYINT}, 
    #{deptId,jdbcType=BIGINT}, 
    #{createTime,jdbcType=TIMESTAMP}
    )
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="com.xlw.sys.model.SysUser" >
    update sys_user
    set username = #{username,jdbcType=VARCHAR},
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      salt = #{salt,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      dept_id = #{deptId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select user_id, username, password, salt, email, mobile, status, dept_id, create_time
    from sys_user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap" >
    select user_id, username, password, salt, email, mobile, status, dept_id, create_time
    from sys_user
  </select>

  <select id="selectOne" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select user_id, username, password, salt, email, mobile, status, dept_id, create_time
    from sys_user
    where username = #{username,jdbcType=VARCHAR} limit 1
  </select>
  
  <update id="updatePassword">
  	update sys_user 
  	set password = #{newPassword,jdbcType=VARCHAR}
  	where 
  	 user_id = #{userId,jdbcType=BIGINT} 
  	 and
  	 password = #{oldPassword,jdbcType=VARCHAR}
  </update>


  <!-- 查询用户的所有权限 -->
  <select id="queryAllPerms" resultType="string">
    select m.perms from sys_user_role ur 
			LEFT JOIN sys_role_menu rm on ur.role_id = rm.role_id 
			LEFT JOIN sys_menu m on rm.menu_id = m.menu_id 
	where ur.user_id = #{userId}
  </select>
	
	<!-- 查询用户的所有菜单ID --> 
  <select id="queryAllMenuId" resultType="long">
    select distinct rm.menu_id from sys_user_role ur 
			LEFT JOIN sys_role_menu rm on ur.role_id = rm.role_id 
    where ur.user_id = #{userId}
  </select>  
</mapper>